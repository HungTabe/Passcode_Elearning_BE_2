// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatarUrl String?
  bio       String?
  twitter   String?
  linkedin  String?
  role      Role     @default(STUDENT)
  
  // Relations
  enrollments    Enrollment[]
  blogPosts      BlogPost[]
  comments       Comment[]
  progress       LessonProgress[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  code        String   @unique // PRN212, PRN222, etc.
  name        String
  title       String
  description String
  videoUrl    String
  thumbnail   String?
  
  // Course details
  requirements String[]
  outcomes     String[]
  duration     Int      // in minutes
  level        Level    @default(BEGINNER)
  isActive     Boolean  @default(true)
  
  // Enhanced course information
  instructor    String
  rating        Float    @default(0.0)
  students      Int      @default(0)
  lessonsCount  Int      @default(0)
  category      String
  price         Float    @default(0.0)
  originalPrice Float?   // For discount pricing
  image         String
  previewUrl    String
  
  // Relations
  lessons       Lesson[]
  enrollments   Enrollment[]
  curriculum    CurriculumSection[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model CurriculumSection {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  order     Int
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("curriculum_sections")
}

model Lesson {
  id                String   @id @default(cuid())
  courseId          String
  curriculumSectionId String?
  title             String
  description       String?
  content           String   @db.Text
  videoUrl          String
  duration          Int      // in minutes
  order             Int
  type              LessonType @default(VIDEO)
  notes             String[]
  
  // Relations
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  curriculumSection CurriculumSection? @relation(fields: [curriculumSectionId], references: [id], onDelete: SetNull)
  progress          LessonProgress[]
  resources         LessonResource[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lessons")
}

model LessonResource {
  id        String @id @default(cuid())
  lessonId  String
  title     String
  type      String
  sizeText  String?
  url       String
  order     Int     @default(0)

  // Relations
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lesson_resources")
}

model Enrollment {
  id       String @id @default(cuid())
  userId   String
  courseId String
  
  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  enrolledAt DateTime @default(now())
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id       String @id @default(cuid())
  userId   String
  lessonId String
  completed Boolean @default(false)
  watchedAt DateTime?
  
  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model BlogPost {
  id            String   @id @default(cuid())
  title         String
  excerpt       String
  content       String   @db.Text
  authorId      String
  category      String
  tags          String[]
  featuredImage String?
  isPublished   Boolean  @default(false)
  publishedAt   DateTime?
  featured      Boolean  @default(false)
  views         Int      @default(0)
  readTime      Int?
  likes         Int      @default(0)
  
  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

enum Role {
  STUDENT
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  ASSIGNMENT
}
